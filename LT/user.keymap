;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {
           "ctrl-c `" [:toggle-console]
           "ctrl-c c" [:show-commandbar-transient]
           "ctrl-c w" [:workspace.show]
           "f1" [:dev-inspector]
           "alt-x" [:show-commandbar-transient]
           "ctrl-h k" [:keymapper.show]
           "ctrl-tab" [:tabs.next]
          }
     :tabs {
            "ctrl-`" [:lt.plugins.alt-tab/alt-tab]
            }
     :lt.plugins.alt-tab/dialog {
                                 "ctrl-left" [:lt.plugins.alt-tab/close-current-tab-and-go-to-previously-used]
                                 }

     :editor {
              "ctrl-d" [:editor.delete-char-right]
              "ctrl-x ctrl-s" [:save]
              "alt-w" [:editor.watch.watch-selection]
              "ctrl-alt-w" [:editor.watch.unwatch]
              "esc" [:editor.selection.clear]

              "cmd-d" [:editor.word-left
                       :paredit.select.parent]

              ;;Select the parent expression, whether that's [], {}, or ()
              "alt-s" [:paredit.select.parent]
              ;; slurp and barf
              "alt-ctrl-0" [:paredit.grow.right]
              "alt-ctrl-9" [:paredit.shrink.right]

              ;;Format the parent ()
              "ctrl-alt-s" [(:paredit.select.parent "(")
                            :smart-indent-selection
                            :paredit.select.clear]

              ;; eval
              "ctrl-x ctrl-e" [:eval-editor-form]
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]

              "cmd-;" [:toggle-comment-selection]

              "ctrl-x ctrl-x" [:lt.plugins.marks/jump-to-large-move-mark]
              "ctrl-x ctrl-a" [:lt.plugins.marks/jump-to-last-edit-mark]
             }

     :editor.clj {
                  "ctrl-d" [:paredit-plus.forward-delete]
                  "backspace" [:paredit-plus.backward-delete]
                  "ctrl-k" [:paredit-plus.kill]
                  "alt-up" [:paredit-plus.splice-sexp-killing-backward]
                  }

     :editor.cljs {
                   "ctrl-d" [:paredit-plus.forward-delete]
                   "backspace" [:paredit-plus.backward-delete]
                   "ctrl-k" [:paredit-plus.kill]
                   "alt-up" [:paredit-plus.splice-sexp-killing-backward]
                   "alt-s" [:paredit-plus.split-sexp]
                   "alt-j" [:paredit-plus.join-sexps]
                  }

     :editor.keys.emacs {
                         "ctrl-g" [(:emacs.keymap-cmd "Ctrl-G")]
                         }

     :editor.keys.normal {
                          "tab" [:smart-indent-selection]
                          }
     :editor.coffee {
                     }
     }

 :- {:tabs {
            "ctrl-tab" [:lt.plugins.alt-tab/alt-tab]
            }
     :editor.keys.normal {
                          "backspace" [:editor.backspace-pair]
                          }
    }
 }
